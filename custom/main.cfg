################################################################################
# Creality K2 macros for better ORCA Sliser compatibility and other improvements
# Based on ideas: https://github.com/jamincollins great thanks!
# GPL-3.0 license 
# Author: Mikhail Ivanov masluf@gmail.com
# /mnt/UDISK/printer_data/config/ 
# bed_mesh_calibate_state:True

[virtual_pins]

# If enabled, this button mesh will be calibrated before every print
[output_pin FORCE_BED_MESH]
pin: virtual_pin:FORCE_BED_MESH_pin
value: 0

[output_pin WAIT_CHAMBER_TEMPERATURE]
pin: virtual_pin:WAIT_CHAMBER_TEMPERATURE_pin
value: 0

[output_pin SOAK_TIME]
pin: virtual_pin:SOAK_TIME_pin
pwm: True
value: 0
scale: 10

[output_pin EXTRA_FAST_START_PRINT]
pin: virtual_pin:EXTRA_FAST_START_PRINT_pin
value: 0

# [output_pin ADAPTIVE_MESH]
# pin: virtual_pin:ADAPTIVE_MESH_pin
# value: 0

# Currently PRINTER_PARAM FANS min value in gcode_macro set higher than hardware do (for safety). check fans on each printer and set actual values for every pcs.
[gcode_macro PRINTER_PARAM]
variable_fan0_min: 25
variable_fan1_min: 15
variable_fan2_min: 60
# variable_dbg: 1 # uncomment for skip WAKE_UP macro

[gcode_macro _TEMPERATURE_VALUES]
variable_modelfan_value: 0              #fan0 P0 in ORCA
variable_chamberfan_value: 0            #fan1 P3 in ORCA Air Filtration
variable_auxfan_value: 0                #fan2 P2 in ORCA AUX FAN
variable_idle_chamber_temperature: 35   #set target temperature when switch off chamber fans
variable_state: 0                       #tristate value 0 - idle, 1 - heating, 2 - cooling
variable_is_m141: 0                     #do not touch it
gcode:

# [gcode_macro DBG]
# gcode:
#   {% set FILE_NAME = printer.print_stats.filename %}
#   {% set FILE_STATE = printer.print_stats.state %}
#   RESPOND MSG="{FILE_NAME} - {FILE_STATE}"

[delayed_gcode WAKE_UP]
initial_duration: 15
gcode:
  {% set FILE_STATE = printer.print_stats.state %}
  {% set POWER_LOSS_STATE = printer.print_stats.power_loss %}
  {% set dbg = printer["gcode_macro PRINTER_PARAM"].dbg|default(0)|int %}
  {% if POWER_LOSS_STATE == 0 %}
    {% if FILE_STATE == "standby" and dbg == 0 %}
      BED_MESH_CLEAR
      G28
      Z_TILT_ADJUST
      G28 Z
      G90
      G1 X175 Z50 F6000
    {% endif %}
  {% endif %}

[delayed_gcode EXHAUST_TIMER]
initial_duration: 0
gcode:
  {% set current_fan1_value = printer["output_pin fan1"].value|float %}
  {% if current_fan1_value != 0 %}
    {% set ct_current = printer["heater_generic chamber_heater"].temperature|float %}
    {% set idle = printer["gcode_macro _TEMPERATURE_VALUES"].idle_chamber_temperature|float %}
    {% if ct_current > idle %}
      UPDATE_DELAYED_GCODE ID=EXHAUST_TIMER DURATION=60
    {% else %}
      M106 P3 S0
      RESPOND MSG="Chamber temperature is idle. Switch off chamber fans"
    {% endif %}
  {% endif %}

[delayed_gcode FAN_COOL_CTRL]
initial_duration: 0
gcode:
  # RESPOND MSG="Fan to cool"
  {% set target = printer["heater_generic chamber_heater"].target|float %}
  {% set current = printer["heater_generic chamber_heater"].temperature|float %}
  {% set idle = printer["gcode_macro _TEMPERATURE_VALUES"].idle_chamber_temperature|float %}
  {% set state = printer["gcode_macro _TEMPERATURE_VALUES"].state|int %}

  {% if target == 0 %}
    RESPOND MSG="Target temperature is zero, switch off fans."
    UPDATE_DELAYED_GCODE ID=FAN_COOL_CTRL DURATION=0
    M106 P3 S0
  {% else %}
    {% if current < target and current > idle and state != 1 %}
      # Switch chamber fan to air filtration value
      {% set fanvalue = printer["gcode_macro _TEMPERATURE_VALUES"].chamberfan_value|int %}
      RESPOND MSG="Switch fans to heating mode. restore fan value: {fanvalue}"
      SET_GCODE_VARIABLE MACRO=_TEMPERATURE_VALUES VARIABLE=state VALUE=1
      SET_PIN PIN=fan1 VALUE={fanvalue}
    {% elif current > (target+2) and current > idle and state != 2 %}
      # Switch chamber fan to cooling value
      RESPOND MSG="Switch fans to cooling mode"
      SET_GCODE_VARIABLE MACRO=_TEMPERATURE_VALUES VARIABLE=state VALUE=2
      {% set current_fan1_value = printer["output_pin fan1"].value|float %}
      SET_GCODE_VARIABLE MACRO=_TEMPERATURE_VALUES VARIABLE=chamberfan_value VALUE={current_fan1_value}
      SET_PIN PIN=fan1 VALUE=255
    {% else %}
      {% if printer["gcode_macro _TEMPERATURE_VALUES"].chamberfan_value|int != 255 and state == 2 %}
        {% set current_fan1_value = printer["output_pin fan1"].value|float %}
        SET_GCODE_VARIABLE MACRO=_TEMPERATURE_VALUES VARIABLE=chamberfan_value VALUE={current_fan1_value}
        SET_PIN PIN=fan1 VALUE=255
      {% endif %}
      # RESPOND MSG="FAN_COOL_CTRL do nothing"
    {% endif %}
  UPDATE_DELAYED_GCODE ID=FAN_COOL_CTRL DURATION=30
  {% endif %}

[delayed_gcode COOLDOWN_HEATER]
initial_duration: 0
gcode:
  RESPOND MSG="Heater is cooling"
  SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET=0

[gcode_macro M141]
gcode:
  SET_GCODE_VARIABLE MACRO=_TEMPERATURE_VALUES VARIABLE=is_m141 VALUE=1
  {% if params.S is defined %}
    {% set S = params.S|float %}
    {% set idle = printer["gcode_macro _TEMPERATURE_VALUES"].idle_chamber_temperature %}
    {% if S > idle %}
      M191 {rawparams}
    {% else %}
      UPDATE_DELAYED_GCODE ID=FAN_COOL_CTRL DURATION=0
      SET_GCODE_VARIABLE MACRO=_TEMPERATURE_VALUES VARIABLE=state VALUE=0
      {% set target = printer["heater_generic chamber_heater"].target|float %}
      {% if target != 0 %}
        SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET=10
      {% endif %}
      {% set current_fan1_value = printer["output_pin fan1"].value|float %}
      {% if current_fan1_value != 0 %}
        SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber_fan TARGET={idle}
      {% endif %}
      UPDATE_DELAYED_GCODE ID=COOLDOWN_HEATER DURATION=60
    {% endif %}
  {% else %}
    UPDATE_DELAYED_GCODE ID=FAN_COOL_CTRL DURATION=0
    SET_GCODE_VARIABLE MACRO=_TEMPERATURE_VALUES VARIABLE=state VALUE=0
    SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET={idle}
    {% set current_fan1_value = printer["output_pin fan1"].value|float %}
    {% if current_fan1_value != 0 %}
      SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber_fan TARGET={idle}
    {% endif %}
    UPDATE_DELAYED_GCODE ID=COOLDOWN_HEATER DURATION=60
  {% endif %}
      
[gcode_macro M191]
gcode:
  {% set FILE_STATE = printer.print_stats.state %}
  # SAVE_GCODE_STATE NAME=M191
  {% set idle = printer["gcode_macro _TEMPERATURE_VALUES"].idle_chamber_temperature %}
  {% set current = printer["heater_generic chamber_heater"].temperature %}
  {% set SP = 0 %}

  {% if 'SP' in params|upper %}
    {% set SP = params.SP %}
  {% endif %}

  {% if params.S is defined %}
    {% set S = params.S|float %}
    {% if S > idle and current < S %}
    #Heating
      RESPOND MSG="Heating chamber to temperature: {S}c"
      # Switch on bed. If M191 calling from START_PRINT do not change bed temp.
      {% if FILE_STATE == "standby" %}
        {% if printer.heater_bed.target < S and SP == 0%}
          {% if S+10 < 60 %}
            M140 S{60}
          {% else %}
            M140 S{S+10}
          {% endif %}
        {% endif %}
      {% endif %}
      SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber_fan TARGET=0
      SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET={S} 
      UPDATE_DELAYED_GCODE ID=FAN_COOL_CTRL DURATION=5

      {% if FILE_STATE == "standby" %}
        {% if "xyz" not in printer.toolhead.homed_axes %}
          G28
        {% endif %}
        BOX_GO_TO_EXTRUDE_POS
        G90
        G1 Z1 F600
        SET_GCODE_VARIABLE MACRO=_TEMPERATURE_VALUES VARIABLE=auxfan_value VALUE={printer["output_pin fan2"].value}
        M106 P2 S153
      {% endif %}

      # in m191 calling not from START_PRINT do not wait chamber temp. So ORCA call m191 before start print if "Activate chamber control" selected and temperature target > 0
      {% if FILE_STATE == "standby" %}
        {% if printer["output_pin WAIT_CHAMBER_TEMPERATURE"].value == 1 and SP == 1 %}
          # Wait indefinitely for temperature
          RESPOND MSG="Wait chamber temperature: {S}c"
          TEMPERATURE_WAIT SENSOR="temperature_sensor chamber_temp"  MINIMUM={S} MAXIMUM={S+5}
          M106 P2 S0
        {% endif %}
      {% endif %}
    #Not heating but cooling heater 1 min
    {% elif S > idle %}
      RESPOND MSG="Cooling chamber to temperature: {S}c"
      M106 P2 S0
      SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET={S}
      SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber_fan TARGET=0
      UPDATE_DELAYED_GCODE ID=FAN_COOL_CTRL DURATION=5
    {% elif S > 0 and current > idle %}
      RESPOND MSG="Cooling chamber to temperature: {idle}c"
      SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET={idle} #cooldown heater
      SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber_fan TARGET=0
      UPDATE_DELAYED_GCODE ID=FAN_COOL_CTRL DURATION=5
      UPDATE_DELAYED_GCODE ID=COOLDOWN_HEATER DURATION=60
    {% elif S > 0 and current <= idle %}
      SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET=0
      SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber_fan TARGET=0
      UPDATE_DELAYED_GCODE ID=FAN_COOL_CTRL DURATION=5
    {% else %}
      SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET=0
      SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber_fan TARGET=0
      UPDATE_DELAYED_GCODE ID=FAN_COOL_CTRL DURATION=5
    {% endif %}
  {% else %}
    SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET=0
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber_fan TARGET=0
    UPDATE_DELAYED_GCODE ID=FAN_COOL_CTRL DURATION=5
  {% endif %}
  # RESTORE_GCODE_STATE NAME=M191
#--------------------------------------------------------

#fan0 P0 in ORCA
#fan1 P3 in ORCA Air Filtration
#fan2 P2 in ORCA AUX FAN
[gcode_macro M106]
gcode:
  {% set fans = printer["gcode_macro PRINTER_PARAM"].fans|int %}
  {% set fan = 0 %}
  {% set value = 0 %}
  {% if params.P is defined %}
    {% set tmp = params.P|int %}
    {% if tmp < fans %}
      {% set fan = tmp %}
    {% endif %}
    #fix for ORCA Slicer
    {% if tmp == 3 %}
      {% set fan = 1 %}
    {% endif %}
    #--
  {% endif %}
  {% if params.S is defined %}
    {% set tmp = params.S|float %}
  {% else %}
    {% set tmp = 255 %}
  {% endif %}
  {% if tmp > 0 %}
    {% if fan == 0 %}
      {% set value = (255 - printer["gcode_macro PRINTER_PARAM"].fan0_min) / 255 * tmp %}
      {% if printer['gcode_macro Qmode'].flag | int == 1 %}
        SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=fan0_value VALUE={printer["gcode_macro PRINTER_PARAM"].fan0_min + value}
        {% if value > (255 - printer['gcode_macro PRINTER_PARAM'].fan0_min) / 2  %}
          {% set value = printer["gcode_macro PRINTER_PARAM"].fan0_min + (255 - printer['gcode_macro PRINTER_PARAM'].fan0_min) / 2 %}
        {% else %}
          {% set value = printer["gcode_macro PRINTER_PARAM"].fan0_min + value %}
        {% endif %}
      {% else %}
        {% set value = printer["gcode_macro PRINTER_PARAM"].fan0_min + value %}
      {% endif %}
    {% endif %}
    {% if fan == 1 %}
      {% set value = (255 - printer["gcode_macro PRINTER_PARAM"].fan1_min) / 255 * tmp %}
      {% if printer['gcode_macro Qmode'].flag | int == 1 %}
        SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=fan1_value VALUE={printer["gcode_macro PRINTER_PARAM"].fan1_min + value}
        {% if value > (255 - printer['gcode_macro PRINTER_PARAM'].fan1_min) / 2  %}
          {% set value = printer["gcode_macro PRINTER_PARAM"].fan1_min + (255 - printer['gcode_macro PRINTER_PARAM'].fan1_min) / 2 %}
        {% else %}
          {% set value = printer["gcode_macro PRINTER_PARAM"].fan1_min + value %}
        {% endif %}
      {% else %}
        {% set value = printer["gcode_macro PRINTER_PARAM"].fan1_min + value %}
      {% endif %}
      
      #fix air filtration
      {% if printer["gcode_macro _TEMPERATURE_VALUES"].is_m141 == 1 %}
        SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber_fan TARGET=0
        SET_GCODE_VARIABLE MACRO=_TEMPERATURE_VALUES VARIABLE=is_m141 VALUE=0
        UPDATE_DELAYED_GCODE ID=EXHAUST_TIMER DURATION=60
      {% endif %}

      SET_GCODE_VARIABLE MACRO=_TEMPERATURE_VALUES VARIABLE=chamberfan_value VALUE={value}
    {% endif %}
    {% if fan == 2 %}
      {% set value = (255 - printer["gcode_macro PRINTER_PARAM"].fan2_min) / 255 * tmp %}
      {% if printer['gcode_macro Qmode'].flag | int == 1 %}
        SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=fan2_value VALUE={printer["gcode_macro PRINTER_PARAM"].fan2_min + value}
        {% if value > (255 - printer['gcode_macro PRINTER_PARAM'].fan2_min) / 2  %}
          {% set value = printer["gcode_macro PRINTER_PARAM"].fan2_min + (255 - printer['gcode_macro PRINTER_PARAM'].fan2_min) / 2 %}
        {% else %}
          {% set value = printer["gcode_macro PRINTER_PARAM"].fan2_min + value %}
        {% endif %}
      {% else %}
        {% set value = printer["gcode_macro PRINTER_PARAM"].fan2_min + value %}
      {% endif %}
    {% endif %}
  {% endif %}
  {% if value >= 255 %}
    {% set value = 255 %}
  {% endif %}
  SET_PIN PIN=fan{fan} VALUE={value}

[respond]

[gcode_macro _CREATE_MESH]
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set PROFILE_NAME = BED_TEMP|string + 'c' %}

  ## make these configurable
  {% set SOAK_TIME = params.SOAK_TIME|default(0)|float %}
  {% set EXTRUDER_WAITTEMP = (140.0|float)|int %}

  M140 S{BED_TEMP}
  M104 S{EXTRUDER_WAITTEMP}

  {% if not 'xyz' in printer.toolhead.homed_axes %}
    G28
    Z_TILT_ADJUST
  {% endif %}

  BOX_GO_TO_EXTRUDE_POS

  M109 S{EXTRUDER_WAITTEMP}
  M190 S{BED_TEMP}

  RESPOND MSG="Soaking for {SOAK_TIME} minutes ..."
  M117 Heat soaking
  G4 P{60000 * SOAK_TIME} # x minute heat soak

  # ensure bed is level
  BOX_NOZZLE_CLEAN
  G28 Z

  M117 Bed meshing
  BED_MESH_CALIBRATE PROFILE={PROFILE_NAME}
  CXSAVE_CONFIG

[gcode_macro MESH_IF_NEEDED]
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set PROFILE_NAME = BED_TEMP|string + 'c' %}

  ## make these configurable
  {% set SOAK_TIME = params.SOAK_TIME|default(5)|float %}

  {% if printer.scanner %} # cartographer
      _CREATE_MESH BED_TEMP={BED_TEMP} SOAK_TIME={SOAK_TIME}
  {% else %}
    RESPOND MSG="Looking for {PROFILE_NAME} ..."

    {% if printer['output_pin FORCE_BED_MESH'].value == 0 and PROFILE_NAME in printer.bed_mesh.profiles %}
      RESPOND MSG="{PROFILE_NAME} exists ..."
    {% else %}
      M117 Mesh {PROFILE_NAME} missing
      RESPOND MSG="{PROFILE_NAME} does not exist, creating ..."
      _CREATE_MESH BED_TEMP={BED_TEMP} SOAK_TIME={SOAK_TIME}
    {% endif %}
  {% endif %}

[gcode_macro START_PRINT]
# be sure to update your slicer to pass in both chamber temp and material type:
# START_PRINT EXTRUDER_TEMP=[nozzle_temperature_initial_layer] BED_TEMP=[bed_temperature_initial_layer_single] CHAMBER_TEMP=[overall_chamber_temperature]
variable_prepare: 0
description: Upgraded Start Print
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(0)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
  {% set EXTRUDER_WAITTEMP = (140.0|float)|int %}

  {% set PROFILE_NAME = BED_TEMP|string + 'c' %}

  {% if printer["output_pin EXTRA_FAST_START_PRINT"].value|int == 1 and "xyz" in printer.toolhead.homed_axes and PROFILE_NAME in printer.bed_mesh.profiles %}
    SET_GCODE_OFFSET Z=0.0 MOVE=1
    BOX_GO_TO_EXTRUDE_POS
    BOX_START_PRINT
    M140 S{BED_TEMP}
    M104 S{EXTRUDER_WAITTEMP}
    M191 S{CHAMBER_TEMP} SP0
    M190 S{BED_TEMP}
    BED_MESH_PROFILE LOAD={BED_TEMP}c
    M109 S{EXTRUDER_TEMP} ;wait nozzle heating
    BOX_NOZZLE_CLEAN

  {% else %}
    M117 START_PRINT
    BOX_START_PRINT  # what exactly does this do?
    G90
    {% set SOAK_TIME = printer["output_pin SOAK_TIME"].value|default(0)|float %}
    
    RESPOND MSG="Resetting Z offset..."
    SET_GCODE_OFFSET Z=0.0 MOVE=1
    
    RESPOND MSG="Turn on bed"
    M140 S{BED_TEMP}
    M191 S{CHAMBER_TEMP} SP1

    {% if "xyz" not in printer.toolhead.homed_axes %}
      G28
      Z_TILT_ADJUST
    {% endif %}

    RESPOND MSG="Start Preparing"
    M117 Start Preparing
    M106 S0  # No need to turn off the model fan
    M104 S{EXTRUDER_WAITTEMP}
    SET_VELOCITY_LIMIT ACCEL=5000 ACCEL_TO_DECEL=5000
    {% if printer['gcode_macro START_PRINT'].prepare|int == 0 %}
      NOZZLE_CLEAR
    {% endif %}
    #TODO: MAKE CONDITION BOX_GO_TO_EXTRUDE_POS if bet current temp != target
    BOX_GO_TO_EXTRUDE_POS
    # M104 S{EXTRUDER_WAITTEMP}
    M117 Heating bed ...
    M190 S{BED_TEMP}  
    M109 S{EXTRUDER_WAITTEMP}

    # Ensure bed is at the desired temp
    # works around some firmware bugs that sometimes turn off the bed
    # M190 S{BED_TEMP}
    
    {% if SOAK_TIME > 0 %}
      M117 Heat soaking ...
      RESPOND MSG="Heat soaking for {SOAK_TIME * 10} minutes"
      G4 P{60000 * (SOAK_TIME * 10)}
    {% endif %}
    # Return to zero
    G28 Z
    BOX_GO_TO_EXTRUDE_POS

    MESH_IF_NEEDED BED_TEMP={BED_TEMP} SOAK_TIME={SOAK_TIME * 10}
    RESPOND MSG="Loading bed mesh: {BED_TEMP}c"
    BED_MESH_PROFILE LOAD={BED_TEMP}c
    M117 MESH: {BED_TEMP}c
    M109 S{EXTRUDER_TEMP} ;wait nozzle heating

    # the stock chamber heater configuration is watermark
    # which means at best it will reach the target temp, but rarely exceed it
    # for materials like ASA the chamber temp should be a _minimum_
    # {% if HEAT_BUMP == 1%}
    #   {% if CHAMBER_TEMP > 0 %}
    #     {% if CHAMBER_TEMP + 5 <= 60 %}
    #       M141 S{CHAMBER_TEMP + 5}
    #     {% else %}
    #       M141 S60
    #     {% endif %}
    #   {% endif %}
    # {% endif %}

    M220 S100 ;Reset Feedrate
    # M221 S100 ;Reset Flowrate
    G21
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=10
    M204 S5000
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL=5000

  {% endif %}
  G92 E0 ; Reset Extruder
  SET_PIN PIN=extruder_fan VALUE=1
  M117 Printing ...

[gcode_macro END_PRINT]
gcode:
  RESTORE_LIMITS
  M400
  G92 E0
  BOX_END 
  BOX_END_PRINT
  Qmode_exit
  EXCLUDE_OBJECT_RESET
  PRINT_PREPARE_CLEAR
  M220 S100
  SET_VELOCITY_LIMIT ACCEL=5000 ACCEL_TO_DECEL=5000
  TURN_OFF_HEATERS
  # M107 P1
  M107 P2
  END_PRINT_POINT
  WAIT_TEMP_START
  M106 P0 S127
  # M141 S0
  SET_PIN PIN=extruder_fan VALUE=0
  BOX_NOZZLE_CLEAN

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  RESUME_EXTERNAL_PROCESS
  {% set get_params = ('VELOCITY=800') %}
  RESUME_BASE {get_params}

# std::string GCodeWriter::set_exhaust_fan(int speed, bool add_eol, bool isCrealityOS)
# {
#     std::ostringstream gcode;
#     if(isCrealityOS)
#         gcode << "M106" << " P1" << " S" << (int)(speed / 100.0 * 255);
#     else
#         gcode << "M106" << " P3" << " S" << (int)(speed / 100.0 * 255);

#     if(add_eol)
#         gcode << "\n";
#     return gcode.str();
# }
